import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace Checkouts {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Checkouts {
    protected readonly _options: Checkouts.Options;
    constructor(_options?: Checkouts.Options);
    /**
     * Creates a Terminal checkout request and sends it to the specified device to take a payment
     * for the requested amount.
     *
     * @param {Square.terminal.CreateTerminalCheckoutRequest} request
     * @param {Checkouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.checkouts.create({
     *         idempotencyKey: "28a0c3bc-7839-11ea-bc55-0242ac130003",
     *         checkout: {
     *             amountMoney: {
     *                 amount: BigInt("2610"),
     *                 currency: "USD"
     *             },
     *             referenceId: "id11572",
     *             note: "A brief note",
     *             deviceOptions: {
     *                 deviceId: "dbb5d83a-7838-11ea-bc55-0242ac130003"
     *             }
     *         }
     *     })
     */
    create(request: Square.terminal.CreateTerminalCheckoutRequest, requestOptions?: Checkouts.RequestOptions): core.HttpResponsePromise<Square.CreateTerminalCheckoutResponse>;
    private __create;
    /**
     * Returns a filtered list of Terminal checkout requests created by the application making the request. Only Terminal checkout requests created for the merchant scoped to the OAuth token are returned. Terminal checkout requests are available for 30 days.
     *
     * @param {Square.terminal.SearchTerminalCheckoutsRequest} request
     * @param {Checkouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.checkouts.search({
     *         query: {
     *             filter: {
     *                 status: "COMPLETED"
     *             }
     *         },
     *         limit: 2
     *     })
     */
    search(request?: Square.terminal.SearchTerminalCheckoutsRequest, requestOptions?: Checkouts.RequestOptions): core.HttpResponsePromise<Square.SearchTerminalCheckoutsResponse>;
    private __search;
    /**
     * Retrieves a Terminal checkout request by `checkout_id`. Terminal checkout requests are available for 30 days.
     *
     * @param {Square.terminal.GetCheckoutsRequest} request
     * @param {Checkouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.checkouts.get({
     *         checkoutId: "checkout_id"
     *     })
     */
    get(request: Square.terminal.GetCheckoutsRequest, requestOptions?: Checkouts.RequestOptions): core.HttpResponsePromise<Square.GetTerminalCheckoutResponse>;
    private __get;
    /**
     * Cancels a Terminal checkout request if the status of the request permits it.
     *
     * @param {Square.terminal.CancelCheckoutsRequest} request
     * @param {Checkouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.checkouts.cancel({
     *         checkoutId: "checkout_id"
     *     })
     */
    cancel(request: Square.terminal.CancelCheckoutsRequest, requestOptions?: Checkouts.RequestOptions): core.HttpResponsePromise<Square.CancelTerminalCheckoutResponse>;
    private __cancel;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
