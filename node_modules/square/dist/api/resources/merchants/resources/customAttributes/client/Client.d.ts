import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace CustomAttributes {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class CustomAttributes {
    protected readonly _options: CustomAttributes.Options;
    constructor(_options?: CustomAttributes.Options);
    /**
     * Deletes [custom attributes](entity:CustomAttribute) for a merchant as a bulk operation.
     * To delete a custom attribute owned by another application, the `visibility` setting must be
     * `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.merchants.BulkDeleteMerchantCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.merchants.customAttributes.batchDelete({
     *         values: {
     *             "id1": {
     *                 key: "alternative_seller_name"
     *             },
     *             "id2": {
     *                 key: "has_seen_tutorial"
     *             }
     *         }
     *     })
     */
    batchDelete(request: Square.merchants.BulkDeleteMerchantCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.BulkDeleteMerchantCustomAttributesResponse>;
    private __batchDelete;
    /**
     * Creates or updates [custom attributes](entity:CustomAttribute) for a merchant as a bulk operation.
     * Use this endpoint to set the value of one or more custom attributes for a merchant.
     * A custom attribute is based on a custom attribute definition in a Square seller account, which is
     * created using the [CreateMerchantCustomAttributeDefinition](api-endpoint:MerchantCustomAttributes-CreateMerchantCustomAttributeDefinition) endpoint.
     * This `BulkUpsertMerchantCustomAttributes` endpoint accepts a map of 1 to 25 individual upsert
     * requests and returns a map of individual upsert responses. Each upsert request has a unique ID
     * and provides a merchant ID and custom attribute. Each upsert response is returned with the ID
     * of the corresponding request.
     * To create or update a custom attribute owned by another application, the `visibility` setting
     * must be `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.merchants.BulkUpsertMerchantCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.merchants.customAttributes.batchUpsert({
     *         values: {
     *             "id1": {
     *                 merchantId: "DM7VKY8Q63GNP",
     *                 customAttribute: {
     *                     key: "alternative_seller_name",
     *                     value: "Ultimate Sneaker Store"
     *                 }
     *             },
     *             "id2": {
     *                 merchantId: "DM7VKY8Q63GNP",
     *                 customAttribute: {
     *                     key: "has_seen_tutorial",
     *                     value: true
     *                 }
     *             }
     *         }
     *     })
     */
    batchUpsert(request: Square.merchants.BulkUpsertMerchantCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.BulkUpsertMerchantCustomAttributesResponse>;
    private __batchUpsert;
    /**
     * Lists the [custom attributes](entity:CustomAttribute) associated with a merchant.
     * You can use the `with_definitions` query parameter to also retrieve custom attribute definitions
     * in the same call.
     * When all response pages are retrieved, the results include all custom attributes that are
     * visible to the requesting application, including those that are owned by other applications
     * and set to `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.merchants.ListCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.merchants.customAttributes.list({
     *         merchantId: "merchant_id",
     *         visibilityFilter: "ALL",
     *         limit: 1,
     *         cursor: "cursor",
     *         withDefinitions: true
     *     })
     */
    list(request: Square.merchants.ListCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): Promise<core.Page<Square.CustomAttribute>>;
    /**
     * Retrieves a [custom attribute](entity:CustomAttribute) associated with a merchant.
     * You can use the `with_definition` query parameter to also retrieve the custom attribute definition
     * in the same call.
     * To retrieve a custom attribute owned by another application, the `visibility` setting must be
     * `VISIBILITY_READ_ONLY` or `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.merchants.GetCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.merchants.customAttributes.get({
     *         merchantId: "merchant_id",
     *         key: "key",
     *         withDefinition: true,
     *         version: 1
     *     })
     */
    get(request: Square.merchants.GetCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.RetrieveMerchantCustomAttributeResponse>;
    private __get;
    /**
     * Creates or updates a [custom attribute](entity:CustomAttribute) for a merchant.
     * Use this endpoint to set the value of a custom attribute for a specified merchant.
     * A custom attribute is based on a custom attribute definition in a Square seller account, which
     * is created using the [CreateMerchantCustomAttributeDefinition](api-endpoint:MerchantCustomAttributes-CreateMerchantCustomAttributeDefinition) endpoint.
     * To create or update a custom attribute owned by another application, the `visibility` setting
     * must be `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.merchants.UpsertMerchantCustomAttributeRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.merchants.customAttributes.upsert({
     *         merchantId: "merchant_id",
     *         key: "key",
     *         customAttribute: {
     *             value: "Ultimate Sneaker Store"
     *         }
     *     })
     */
    upsert(request: Square.merchants.UpsertMerchantCustomAttributeRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.UpsertMerchantCustomAttributeResponse>;
    private __upsert;
    /**
     * Deletes a [custom attribute](entity:CustomAttribute) associated with a merchant.
     * To delete a custom attribute owned by another application, the `visibility` setting must be
     * `VISIBILITY_READ_WRITE_VALUES`.
     *
     * @param {Square.merchants.DeleteCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.merchants.customAttributes.delete({
     *         merchantId: "merchant_id",
     *         key: "key"
     *     })
     */
    delete(request: Square.merchants.DeleteCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.DeleteMerchantCustomAttributeResponse>;
    private __delete;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
