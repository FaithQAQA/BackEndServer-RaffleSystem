import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../../../BaseClient";
import * as core from "../../../../../../../../core";
import type * as Square from "../../../../../../../index";
export declare namespace Promotions {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Promotions {
    protected readonly _options: Promotions.Options;
    constructor(_options?: Promotions.Options);
    /**
     * Lists the loyalty promotions associated with a [loyalty program](entity:LoyaltyProgram).
     * Results are sorted by the `created_at` date in descending order (newest to oldest).
     *
     * @param {Square.loyalty.programs.ListPromotionsRequest} request
     * @param {Promotions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.programs.promotions.list({
     *         programId: "program_id",
     *         status: "ACTIVE",
     *         cursor: "cursor",
     *         limit: 1
     *     })
     */
    list(request: Square.loyalty.programs.ListPromotionsRequest, requestOptions?: Promotions.RequestOptions): Promise<core.Page<Square.LoyaltyPromotion>>;
    /**
     * Creates a loyalty promotion for a [loyalty program](entity:LoyaltyProgram). A loyalty promotion
     * enables buyers to earn points in addition to those earned from the base loyalty program.
     *
     * This endpoint sets the loyalty promotion to the `ACTIVE` or `SCHEDULED` status, depending on the
     * `available_time` setting. A loyalty program can have a maximum of 10 loyalty promotions with an
     * `ACTIVE` or `SCHEDULED` status.
     *
     * @param {Square.loyalty.programs.CreateLoyaltyPromotionRequest} request
     * @param {Promotions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.programs.promotions.create({
     *         programId: "program_id",
     *         loyaltyPromotion: {
     *             name: "Tuesday Happy Hour Promo",
     *             incentive: {
     *                 type: "POINTS_MULTIPLIER",
     *                 pointsMultiplierData: {
     *                     multiplier: "3.0"
     *                 }
     *             },
     *             availableTime: {
     *                 timePeriods: ["BEGIN:VEVENT\nDTSTART:20220816T160000\nDURATION:PT2H\nRRULE:FREQ=WEEKLY;BYDAY=TU\nEND:VEVENT"]
     *             },
     *             triggerLimit: {
     *                 times: 1,
     *                 interval: "DAY"
     *             },
     *             minimumSpendAmountMoney: {
     *                 amount: BigInt("2000"),
     *                 currency: "USD"
     *             },
     *             qualifyingCategoryIds: ["XTQPYLR3IIU9C44VRCB3XD12"]
     *         },
     *         idempotencyKey: "ec78c477-b1c3-4899-a209-a4e71337c996"
     *     })
     */
    create(request: Square.loyalty.programs.CreateLoyaltyPromotionRequest, requestOptions?: Promotions.RequestOptions): core.HttpResponsePromise<Square.CreateLoyaltyPromotionResponse>;
    private __create;
    /**
     * Retrieves a loyalty promotion.
     *
     * @param {Square.loyalty.programs.GetPromotionsRequest} request
     * @param {Promotions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.programs.promotions.get({
     *         programId: "program_id",
     *         promotionId: "promotion_id"
     *     })
     */
    get(request: Square.loyalty.programs.GetPromotionsRequest, requestOptions?: Promotions.RequestOptions): core.HttpResponsePromise<Square.GetLoyaltyPromotionResponse>;
    private __get;
    /**
     * Cancels a loyalty promotion. Use this endpoint to cancel an `ACTIVE` promotion earlier than the
     * end date, cancel an `ACTIVE` promotion when an end date is not specified, or cancel a `SCHEDULED` promotion.
     * Because updating a promotion is not supported, you can also use this endpoint to cancel a promotion before
     * you create a new one.
     *
     * This endpoint sets the loyalty promotion to the `CANCELED` state
     *
     * @param {Square.loyalty.programs.CancelPromotionsRequest} request
     * @param {Promotions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.programs.promotions.cancel({
     *         programId: "program_id",
     *         promotionId: "promotion_id"
     *     })
     */
    cancel(request: Square.loyalty.programs.CancelPromotionsRequest, requestOptions?: Promotions.RequestOptions): core.HttpResponsePromise<Square.CancelLoyaltyPromotionResponse>;
    private __cancel;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
