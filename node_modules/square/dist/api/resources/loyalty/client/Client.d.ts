import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
import { Accounts } from "../resources/accounts/client/Client";
import { Programs } from "../resources/programs/client/Client";
import { Rewards } from "../resources/rewards/client/Client";
export declare namespace Loyalty {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Loyalty {
    protected readonly _options: Loyalty.Options;
    protected _accounts: Accounts | undefined;
    protected _programs: Programs | undefined;
    protected _rewards: Rewards | undefined;
    constructor(_options?: Loyalty.Options);
    get accounts(): Accounts;
    get programs(): Programs;
    get rewards(): Rewards;
    /**
     * Searches for loyalty events.
     *
     * A Square loyalty program maintains a ledger of events that occur during the lifetime of a
     * buyer's loyalty account. Each change in the point balance
     * (for example, points earned, points redeemed, and points expired) is
     * recorded in the ledger. Using this endpoint, you can search the ledger for events.
     *
     * Search results are sorted by `created_at` in descending order.
     *
     * @param {Square.SearchLoyaltyEventsRequest} request
     * @param {Loyalty.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.loyalty.searchEvents({
     *         query: {
     *             filter: {
     *                 orderFilter: {
     *                     orderId: "PyATxhYLfsMqpVkcKJITPydgEYfZY"
     *                 }
     *             }
     *         },
     *         limit: 30
     *     })
     */
    searchEvents(request?: Square.SearchLoyaltyEventsRequest, requestOptions?: Loyalty.RequestOptions): core.HttpResponsePromise<Square.SearchLoyaltyEventsResponse>;
    private __searchEvents;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
