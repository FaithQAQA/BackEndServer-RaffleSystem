import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
export declare namespace Channels {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Channels {
    protected readonly _options: Channels.Options;
    constructor(_options?: Channels.Options);
    /**
     *
     *
     * @param {Square.ListChannelsRequest} request
     * @param {Channels.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.channels.list({
     *         referenceType: "UNKNOWN_TYPE",
     *         referenceId: "reference_id",
     *         status: "ACTIVE",
     *         cursor: "cursor",
     *         limit: 1
     *     })
     */
    list(request?: Square.ListChannelsRequest, requestOptions?: Channels.RequestOptions): Promise<core.Page<Square.Channel>>;
    /**
     *
     *
     * @param {Square.BulkRetrieveChannelsRequest} request
     * @param {Channels.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.channels.bulkRetrieve({
     *         channelIds: ["CH_9C03D0B59", "CH_6X139B5MN", "NOT_EXISTING"]
     *     })
     */
    bulkRetrieve(request: Square.BulkRetrieveChannelsRequest, requestOptions?: Channels.RequestOptions): core.HttpResponsePromise<Square.BulkRetrieveChannelsResponse>;
    private __bulkRetrieve;
    /**
     *
     *
     * @param {Square.GetChannelsRequest} request
     * @param {Channels.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.channels.get({
     *         channelId: "channel_id"
     *     })
     */
    get(request: Square.GetChannelsRequest, requestOptions?: Channels.RequestOptions): core.HttpResponsePromise<Square.RetrieveChannelResponse>;
    private __get;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
