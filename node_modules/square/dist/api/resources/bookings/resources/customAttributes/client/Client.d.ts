import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace CustomAttributes {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class CustomAttributes {
    protected readonly _options: CustomAttributes.Options;
    constructor(_options?: CustomAttributes.Options);
    /**
     * Bulk deletes bookings custom attributes.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.bookings.BulkDeleteBookingCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributes.batchDelete({
     *         values: {
     *             "key": {
     *                 bookingId: "booking_id",
     *                 key: "key"
     *             }
     *         }
     *     })
     */
    batchDelete(request: Square.bookings.BulkDeleteBookingCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.BulkDeleteBookingCustomAttributesResponse>;
    private __batchDelete;
    /**
     * Bulk upserts bookings custom attributes.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.bookings.BulkUpsertBookingCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributes.batchUpsert({
     *         values: {
     *             "key": {
     *                 bookingId: "booking_id",
     *                 customAttribute: {}
     *             }
     *         }
     *     })
     */
    batchUpsert(request: Square.bookings.BulkUpsertBookingCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.BulkUpsertBookingCustomAttributesResponse>;
    private __batchUpsert;
    /**
     * Lists a booking's custom attributes.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
     *
     * @param {Square.bookings.ListCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributes.list({
     *         bookingId: "booking_id",
     *         limit: 1,
     *         cursor: "cursor",
     *         withDefinitions: true
     *     })
     */
    list(request: Square.bookings.ListCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): Promise<core.Page<Square.CustomAttribute>>;
    /**
     * Retrieves a bookings custom attribute.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_READ` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_READ` and `APPOINTMENTS_READ` for the OAuth scope.
     *
     * @param {Square.bookings.GetCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributes.get({
     *         bookingId: "booking_id",
     *         key: "key",
     *         withDefinition: true,
     *         version: 1
     *     })
     */
    get(request: Square.bookings.GetCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.RetrieveBookingCustomAttributeResponse>;
    private __get;
    /**
     * Upserts a bookings custom attribute.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.bookings.UpsertBookingCustomAttributeRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributes.upsert({
     *         bookingId: "booking_id",
     *         key: "key",
     *         customAttribute: {}
     *     })
     */
    upsert(request: Square.bookings.UpsertBookingCustomAttributeRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.UpsertBookingCustomAttributeResponse>;
    private __upsert;
    /**
     * Deletes a bookings custom attribute.
     *
     * To call this endpoint with buyer-level permissions, set `APPOINTMENTS_WRITE` for the OAuth scope.
     * To call this endpoint with seller-level permissions, set `APPOINTMENTS_ALL_WRITE` and `APPOINTMENTS_WRITE` for the OAuth scope.
     *
     * For calls to this endpoint with seller-level permissions to succeed, the seller must have subscribed to *Appointments Plus*
     * or *Appointments Premium*.
     *
     * @param {Square.bookings.DeleteCustomAttributesRequest} request
     * @param {CustomAttributes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.customAttributes.delete({
     *         bookingId: "booking_id",
     *         key: "key"
     *     })
     */
    delete(request: Square.bookings.DeleteCustomAttributesRequest, requestOptions?: CustomAttributes.RequestOptions): core.HttpResponsePromise<Square.DeleteBookingCustomAttributeResponse>;
    private __delete;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
