import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace Transactions {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Transactions {
    protected readonly _options: Transactions.Options;
    constructor(_options?: Transactions.Options);
    /**
     * Lists transactions for a particular location.
     *
     * Transactions include payment information from sales and exchanges and refund
     * information from returns and exchanges.
     *
     * Max results per [page](https://developer.squareup.com/docs/working-with-apis/pagination): 50
     *
     * @param {Square.locations.ListTransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.locations.transactions.list({
     *         locationId: "location_id",
     *         beginTime: "begin_time",
     *         endTime: "end_time",
     *         sortOrder: "DESC",
     *         cursor: "cursor"
     *     })
     */
    list(request: Square.locations.ListTransactionsRequest, requestOptions?: Transactions.RequestOptions): core.HttpResponsePromise<Square.ListTransactionsResponse>;
    private __list;
    /**
     * Retrieves details for a single transaction.
     *
     * @param {Square.locations.GetTransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.locations.transactions.get({
     *         locationId: "location_id",
     *         transactionId: "transaction_id"
     *     })
     */
    get(request: Square.locations.GetTransactionsRequest, requestOptions?: Transactions.RequestOptions): core.HttpResponsePromise<Square.GetTransactionResponse>;
    private __get;
    /**
     * Captures a transaction that was created with the [Charge](api-endpoint:Transactions-Charge)
     * endpoint with a `delay_capture` value of `true`.
     *
     *
     * See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
     * for more information.
     *
     * @param {Square.locations.CaptureTransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.locations.transactions.capture({
     *         locationId: "location_id",
     *         transactionId: "transaction_id"
     *     })
     */
    capture(request: Square.locations.CaptureTransactionsRequest, requestOptions?: Transactions.RequestOptions): core.HttpResponsePromise<Square.CaptureTransactionResponse>;
    private __capture;
    /**
     * Cancels a transaction that was created with the [Charge](api-endpoint:Transactions-Charge)
     * endpoint with a `delay_capture` value of `true`.
     *
     *
     * See [Delayed capture transactions](https://developer.squareup.com/docs/payments/transactions/overview#delayed-capture)
     * for more information.
     *
     * @param {Square.locations.VoidTransactionsRequest} request
     * @param {Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.locations.transactions.void({
     *         locationId: "location_id",
     *         transactionId: "transaction_id"
     *     })
     */
    void(request: Square.locations.VoidTransactionsRequest, requestOptions?: Transactions.RequestOptions): core.HttpResponsePromise<Square.VoidTransactionResponse>;
    private __void;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
