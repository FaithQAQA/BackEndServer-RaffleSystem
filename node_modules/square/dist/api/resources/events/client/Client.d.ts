import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
export declare namespace Events {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Events {
    protected readonly _options: Events.Options;
    constructor(_options?: Events.Options);
    /**
     * Search for Square API events that occur within a 28-day timeframe.
     *
     * @param {Square.SearchEventsRequest} request
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.events.searchEvents()
     */
    searchEvents(request?: Square.SearchEventsRequest, requestOptions?: Events.RequestOptions): core.HttpResponsePromise<Square.SearchEventsResponse>;
    private __searchEvents;
    /**
     * Disables events to prevent them from being searchable.
     * All events are disabled by default. You must enable events to make them searchable.
     * Disabling events for a specific time period prevents them from being searchable, even if you re-enable them later.
     *
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.events.disableEvents()
     */
    disableEvents(requestOptions?: Events.RequestOptions): core.HttpResponsePromise<Square.DisableEventsResponse>;
    private __disableEvents;
    /**
     * Enables events to make them searchable. Only events that occur while in the enabled state are searchable.
     *
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.events.enableEvents()
     */
    enableEvents(requestOptions?: Events.RequestOptions): core.HttpResponsePromise<Square.EnableEventsResponse>;
    private __enableEvents;
    /**
     * Lists all event types that you can subscribe to as webhooks or query using the Events API.
     *
     * @param {Square.ListEventTypesRequest} request
     * @param {Events.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.events.listEventTypes({
     *         apiVersion: "api_version"
     *     })
     */
    listEventTypes(request?: Square.ListEventTypesRequest, requestOptions?: Events.RequestOptions): core.HttpResponsePromise<Square.ListEventTypesResponse>;
    private __listEventTypes;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
