"use strict";
// This file was auto-generated by Fern from our API Definition.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shifts = void 0;
const core = __importStar(require("../../../../../../core"));
const headers_1 = require("../../../../../../core/headers");
const environments = __importStar(require("../../../../../../environments"));
const errors = __importStar(require("../../../../../../errors/index"));
const serializers = __importStar(require("../../../../../../serialization/index"));
class Shifts {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Provides the details for all of the cash drawer shifts for a location
     * in a date range.
     *
     * @param {Square.cashDrawers.ListShiftsRequest} request
     * @param {Shifts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cashDrawers.shifts.list({
     *         locationId: "location_id",
     *         sortOrder: "DESC",
     *         beginTime: "begin_time",
     *         endTime: "end_time",
     *         limit: 1,
     *         cursor: "cursor"
     *     })
     */
    list(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const list = core.HttpResponsePromise.interceptFunction((request) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                const { locationId, sortOrder, beginTime, endTime, limit, cursor } = request;
                const _queryParams = {};
                _queryParams.location_id = locationId;
                if (sortOrder !== undefined) {
                    _queryParams.sort_order = serializers.SortOrder.jsonOrThrow(sortOrder, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                if (beginTime !== undefined) {
                    _queryParams.begin_time = beginTime;
                }
                if (endTime !== undefined) {
                    _queryParams.end_time = endTime;
                }
                if (limit !== undefined) {
                    _queryParams.limit = (_a = limit === null || limit === void 0 ? void 0 : limit.toString()) !== null && _a !== void 0 ? _a : null;
                }
                if (cursor !== undefined) {
                    _queryParams.cursor = cursor;
                }
                const _headers = (0, headers_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "Square-Version": (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : "2025-10-16",
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers);
                const _response = yield ((_d = this._options.fetcher) !== null && _d !== void 0 ? _d : core.fetcher)({
                    url: core.url.join((_f = (_e = (yield core.Supplier.get(this._options.baseUrl))) !== null && _e !== void 0 ? _e : (yield core.Supplier.get(this._options.environment))) !== null && _f !== void 0 ? _f : environments.SquareEnvironment.Production, "v2/cash-drawers/shifts"),
                    method: "GET",
                    headers: _headers,
                    queryParameters: Object.assign(Object.assign({}, _queryParams), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.queryParams),
                    timeoutMs: ((_j = (_g = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !== null && _g !== void 0 ? _g : (_h = this._options) === null || _h === void 0 ? void 0 : _h.timeoutInSeconds) !== null && _j !== void 0 ? _j : 60) * 1000,
                    maxRetries: (_k = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries) !== null && _k !== void 0 ? _k : (_l = this._options) === null || _l === void 0 ? void 0 : _l.maxRetries,
                    abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.ListCashDrawerShiftsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/cash-drawers/shifts.");
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            }));
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => (response === null || response === void 0 ? void 0 : response.cursor) != null && !(typeof (response === null || response === void 0 ? void 0 : response.cursor) === "string" && (response === null || response === void 0 ? void 0 : response.cursor) === ""),
                getItems: (response) => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.cashDrawerShifts) !== null && _a !== void 0 ? _a : []; },
                loadPage: (response) => {
                    return list(core.setObjectProperty(request, "cursor", response === null || response === void 0 ? void 0 : response.cursor));
                },
            });
        });
    }
    /**
     * Provides the summary details for a single cash drawer shift. See
     * [ListCashDrawerShiftEvents](api-endpoint:CashDrawers-ListCashDrawerShiftEvents) for a list of cash drawer shift events.
     *
     * @param {Square.cashDrawers.GetShiftsRequest} request
     * @param {Shifts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cashDrawers.shifts.get({
     *         shiftId: "shift_id",
     *         locationId: "location_id"
     *     })
     */
    get(request, requestOptions) {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }
    __get(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            const { shiftId, locationId } = request;
            const _queryParams = {};
            _queryParams.location_id = locationId;
            const _headers = (0, headers_1.mergeHeaders)((_a = this._options) === null || _a === void 0 ? void 0 : _a.headers, (0, headers_1.mergeOnlyDefinedHeaders)({
                Authorization: yield this._getAuthorizationHeader(),
                "Square-Version": (_b = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _b !== void 0 ? _b : "2025-10-16",
            }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers);
            const _response = yield ((_c = this._options.fetcher) !== null && _c !== void 0 ? _c : core.fetcher)({
                url: core.url.join((_e = (_d = (yield core.Supplier.get(this._options.baseUrl))) !== null && _d !== void 0 ? _d : (yield core.Supplier.get(this._options.environment))) !== null && _e !== void 0 ? _e : environments.SquareEnvironment.Production, `v2/cash-drawers/shifts/${encodeURIComponent(shiftId)}`),
                method: "GET",
                headers: _headers,
                queryParameters: Object.assign(Object.assign({}, _queryParams), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.queryParams),
                timeoutMs: ((_h = (_f = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !== null && _f !== void 0 ? _f : (_g = this._options) === null || _g === void 0 ? void 0 : _g.timeoutInSeconds) !== null && _h !== void 0 ? _h : 60) * 1000,
                maxRetries: (_j = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries) !== null && _j !== void 0 ? _j : (_k = this._options) === null || _k === void 0 ? void 0 : _k.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return {
                    data: serializers.GetCashDrawerShiftResponse.parseOrThrow(_response.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        skipValidation: true,
                        breadcrumbsPrefix: ["response"],
                    }),
                    rawResponse: _response.rawResponse,
                };
            }
            if (_response.error.reason === "status-code") {
                throw new errors.SquareError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.body,
                    rawResponse: _response.rawResponse,
                });
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                        rawResponse: _response.rawResponse,
                    });
                case "timeout":
                    throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/cash-drawers/shifts/{shift_id}.");
                case "unknown":
                    throw new errors.SquareError({
                        message: _response.error.errorMessage,
                        rawResponse: _response.rawResponse,
                    });
            }
        });
    }
    /**
     * Provides a paginated list of events for a single cash drawer shift.
     *
     * @param {Square.cashDrawers.ListEventsShiftsRequest} request
     * @param {Shifts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cashDrawers.shifts.listEvents({
     *         shiftId: "shift_id",
     *         locationId: "location_id",
     *         limit: 1,
     *         cursor: "cursor"
     *     })
     */
    listEvents(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const list = core.HttpResponsePromise.interceptFunction((request) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                const { shiftId, locationId, limit, cursor } = request;
                const _queryParams = {};
                _queryParams.location_id = locationId;
                if (limit !== undefined) {
                    _queryParams.limit = (_a = limit === null || limit === void 0 ? void 0 : limit.toString()) !== null && _a !== void 0 ? _a : null;
                }
                if (cursor !== undefined) {
                    _queryParams.cursor = cursor;
                }
                const _headers = (0, headers_1.mergeHeaders)((_b = this._options) === null || _b === void 0 ? void 0 : _b.headers, (0, headers_1.mergeOnlyDefinedHeaders)({
                    Authorization: yield this._getAuthorizationHeader(),
                    "Square-Version": (_c = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.version) !== null && _c !== void 0 ? _c : "2025-10-16",
                }), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers);
                const _response = yield ((_d = this._options.fetcher) !== null && _d !== void 0 ? _d : core.fetcher)({
                    url: core.url.join((_f = (_e = (yield core.Supplier.get(this._options.baseUrl))) !== null && _e !== void 0 ? _e : (yield core.Supplier.get(this._options.environment))) !== null && _f !== void 0 ? _f : environments.SquareEnvironment.Production, `v2/cash-drawers/shifts/${encodeURIComponent(shiftId)}/events`),
                    method: "GET",
                    headers: _headers,
                    queryParameters: Object.assign(Object.assign({}, _queryParams), requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.queryParams),
                    timeoutMs: ((_j = (_g = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !== null && _g !== void 0 ? _g : (_h = this._options) === null || _h === void 0 ? void 0 : _h.timeoutInSeconds) !== null && _j !== void 0 ? _j : 60) * 1000,
                    maxRetries: (_k = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries) !== null && _k !== void 0 ? _k : (_l = this._options) === null || _l === void 0 ? void 0 : _l.maxRetries,
                    abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.ListCashDrawerShiftEventsResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    throw new errors.SquareError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.SquareError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.SquareTimeoutError("Timeout exceeded when calling GET /v2/cash-drawers/shifts/{shift_id}/events.");
                    case "unknown":
                        throw new errors.SquareError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            }));
            const dataWithRawResponse = yield list(request).withRawResponse();
            return new core.Pageable({
                response: dataWithRawResponse.data,
                rawResponse: dataWithRawResponse.rawResponse,
                hasNextPage: (response) => (response === null || response === void 0 ? void 0 : response.cursor) != null && !(typeof (response === null || response === void 0 ? void 0 : response.cursor) === "string" && (response === null || response === void 0 ? void 0 : response.cursor) === ""),
                getItems: (response) => { var _a; return (_a = response === null || response === void 0 ? void 0 : response.cashDrawerShiftEvents) !== null && _a !== void 0 ? _a : []; },
                loadPage: (response) => {
                    return list(core.setObjectProperty(request, "cursor", response === null || response === void 0 ? void 0 : response.cursor));
                },
            });
        });
    }
    _getAuthorizationHeader() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const bearer = (_a = (yield core.Supplier.get(this._options.token))) !== null && _a !== void 0 ? _a : process === null || process === void 0 ? void 0 : process.env.SQUARE_TOKEN;
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Shifts = Shifts;
