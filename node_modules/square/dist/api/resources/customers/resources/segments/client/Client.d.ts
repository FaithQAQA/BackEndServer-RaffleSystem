import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace Segments {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Segments {
    protected readonly _options: Segments.Options;
    constructor(_options?: Segments.Options);
    /**
     * Retrieves the list of customer segments of a business.
     *
     * @param {Square.customers.ListSegmentsRequest} request
     * @param {Segments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.segments.list({
     *         cursor: "cursor",
     *         limit: 1
     *     })
     */
    list(request?: Square.customers.ListSegmentsRequest, requestOptions?: Segments.RequestOptions): Promise<core.Page<Square.CustomerSegment>>;
    /**
     * Retrieves a specific customer segment as identified by the `segment_id` value.
     *
     * @param {Square.customers.GetSegmentsRequest} request
     * @param {Segments.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customers.segments.get({
     *         segmentId: "segment_id"
     *     })
     */
    get(request: Square.customers.GetSegmentsRequest, requestOptions?: Segments.RequestOptions): core.HttpResponsePromise<Square.GetCustomerSegmentResponse>;
    private __get;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
