import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace Evidence {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Evidence {
    protected readonly _options: Evidence.Options;
    constructor(_options?: Evidence.Options);
    /**
     * Returns a list of evidence associated with a dispute.
     *
     * @param {Square.disputes.ListEvidenceRequest} request
     * @param {Evidence.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.evidence.list({
     *         disputeId: "dispute_id",
     *         cursor: "cursor"
     *     })
     */
    list(request: Square.disputes.ListEvidenceRequest, requestOptions?: Evidence.RequestOptions): Promise<core.Page<Square.DisputeEvidence>>;
    /**
     * Returns the metadata for the evidence specified in the request URL path.
     *
     * You must maintain a copy of any evidence uploaded if you want to reference it later. Evidence cannot be downloaded after you upload it.
     *
     * @param {Square.disputes.GetEvidenceRequest} request
     * @param {Evidence.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.evidence.get({
     *         disputeId: "dispute_id",
     *         evidenceId: "evidence_id"
     *     })
     */
    get(request: Square.disputes.GetEvidenceRequest, requestOptions?: Evidence.RequestOptions): core.HttpResponsePromise<Square.GetDisputeEvidenceResponse>;
    private __get;
    /**
     * Removes specified evidence from a dispute.
     * Square does not send the bank any evidence that is removed.
     *
     * @param {Square.disputes.DeleteEvidenceRequest} request
     * @param {Evidence.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.evidence.delete({
     *         disputeId: "dispute_id",
     *         evidenceId: "evidence_id"
     *     })
     */
    delete(request: Square.disputes.DeleteEvidenceRequest, requestOptions?: Evidence.RequestOptions): core.HttpResponsePromise<Square.DeleteDisputeEvidenceResponse>;
    private __delete;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
