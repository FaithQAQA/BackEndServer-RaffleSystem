import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace Codes {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Codes {
    protected readonly _options: Codes.Options;
    constructor(_options?: Codes.Options);
    /**
     * Lists all DeviceCodes associated with the merchant.
     *
     * @param {Square.devices.ListCodesRequest} request
     * @param {Codes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.devices.codes.list({
     *         cursor: "cursor",
     *         locationId: "location_id",
     *         productType: "TERMINAL_API",
     *         status: "UNKNOWN"
     *     })
     */
    list(request?: Square.devices.ListCodesRequest, requestOptions?: Codes.RequestOptions): Promise<core.Page<Square.DeviceCode>>;
    /**
     * Creates a DeviceCode that can be used to login to a Square Terminal device to enter the connected
     * terminal mode.
     *
     * @param {Square.devices.CreateDeviceCodeRequest} request
     * @param {Codes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.devices.codes.create({
     *         idempotencyKey: "01bb00a6-0c86-4770-94ed-f5fca973cd56",
     *         deviceCode: {
     *             name: "Counter 1",
     *             productType: "TERMINAL_API",
     *             locationId: "B5E4484SHHNYH"
     *         }
     *     })
     */
    create(request: Square.devices.CreateDeviceCodeRequest, requestOptions?: Codes.RequestOptions): core.HttpResponsePromise<Square.CreateDeviceCodeResponse>;
    private __create;
    /**
     * Retrieves DeviceCode with the associated ID.
     *
     * @param {Square.devices.GetCodesRequest} request
     * @param {Codes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.devices.codes.get({
     *         id: "id"
     *     })
     */
    get(request: Square.devices.GetCodesRequest, requestOptions?: Codes.RequestOptions): core.HttpResponsePromise<Square.GetDeviceCodeResponse>;
    private __get;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
