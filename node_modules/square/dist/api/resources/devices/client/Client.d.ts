import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
import { Codes } from "../resources/codes/client/Client";
export declare namespace Devices {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Devices {
    protected readonly _options: Devices.Options;
    protected _codes: Codes | undefined;
    constructor(_options?: Devices.Options);
    get codes(): Codes;
    /**
     * List devices associated with the merchant. Currently, only Terminal API
     * devices are supported.
     *
     * @param {Square.ListDevicesRequest} request
     * @param {Devices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.devices.list({
     *         cursor: "cursor",
     *         sortOrder: "DESC",
     *         limit: 1,
     *         locationId: "location_id"
     *     })
     */
    list(request?: Square.ListDevicesRequest, requestOptions?: Devices.RequestOptions): Promise<core.Page<Square.Device>>;
    /**
     * Retrieves Device with the associated `device_id`.
     *
     * @param {Square.GetDevicesRequest} request
     * @param {Devices.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.devices.get({
     *         deviceId: "device_id"
     *     })
     */
    get(request: Square.GetDevicesRequest, requestOptions?: Devices.RequestOptions): core.HttpResponsePromise<Square.GetDeviceResponse>;
    private __get;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
