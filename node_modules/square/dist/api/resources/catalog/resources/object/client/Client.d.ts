import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace Object_ {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Object_ {
    protected readonly _options: Object_.Options;
    constructor(_options?: Object_.Options);
    /**
     * Creates a new or updates the specified [CatalogObject](entity:CatalogObject).
     *
     * To ensure consistency, only one update request is processed at a time per seller account.
     * While one (batch or non-batch) update request is being processed, other (batched and non-batched)
     * update requests are rejected with the `429` error code.
     *
     * @param {Square.catalog.UpsertCatalogObjectRequest} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.catalog.object.upsert({
     *         idempotencyKey: "af3d1afc-7212-4300-b463-0bfc5314a5ae",
     *         object: {
     *             type: "ITEM",
     *             id: "id"
     *         }
     *     })
     */
    upsert(request: Square.catalog.UpsertCatalogObjectRequest, requestOptions?: Object_.RequestOptions): core.HttpResponsePromise<Square.UpsertCatalogObjectResponse>;
    private __upsert;
    /**
     * Returns a single [CatalogItem](entity:CatalogItem) as a
     * [CatalogObject](entity:CatalogObject) based on the provided ID. The returned
     * object includes all of the relevant [CatalogItem](entity:CatalogItem)
     * information including: [CatalogItemVariation](entity:CatalogItemVariation)
     * children, references to its
     * [CatalogModifierList](entity:CatalogModifierList) objects, and the ids of
     * any [CatalogTax](entity:CatalogTax) objects that apply to it.
     *
     * @param {Square.catalog.GetObjectRequest} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.catalog.object.get({
     *         objectId: "object_id",
     *         includeRelatedObjects: true,
     *         catalogVersion: BigInt("1000000"),
     *         includeCategoryPathToRoot: true
     *     })
     */
    get(request: Square.catalog.GetObjectRequest, requestOptions?: Object_.RequestOptions): core.HttpResponsePromise<Square.GetCatalogObjectResponse>;
    private __get;
    /**
     * Deletes a single [CatalogObject](entity:CatalogObject) based on the
     * provided ID and returns the set of successfully deleted IDs in the response.
     * Deletion is a cascading event such that all children of the targeted object
     * are also deleted. For example, deleting a [CatalogItem](entity:CatalogItem)
     * will also delete all of its
     * [CatalogItemVariation](entity:CatalogItemVariation) children.
     *
     * To ensure consistency, only one delete request is processed at a time per seller account.
     * While one (batch or non-batch) delete request is being processed, other (batched and non-batched)
     * delete requests are rejected with the `429` error code.
     *
     * @param {Square.catalog.DeleteObjectRequest} request
     * @param {Object_.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.catalog.object.delete({
     *         objectId: "object_id"
     *     })
     */
    delete(request: Square.catalog.DeleteObjectRequest, requestOptions?: Object_.RequestOptions): core.HttpResponsePromise<Square.DeleteCatalogObjectResponse>;
    private __delete;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
