import type * as Square from "../../api/index";
import * as core from "../../core";
import type * as serializers from "../index";
import { CardBrand } from "./CardBrand";
import { DisputedPayment } from "./DisputedPayment";
import { DisputeReason } from "./DisputeReason";
import { DisputeState } from "./DisputeState";
import { Money } from "./Money";
export declare const Dispute: core.serialization.ObjectSchema<serializers.Dispute.Raw, Square.Dispute>;
export declare namespace Dispute {
    interface Raw {
        dispute_id?: (string | null | undefined) | null;
        id?: string | null;
        amount_money?: Money.Raw | null;
        reason?: DisputeReason.Raw | null;
        state?: DisputeState.Raw | null;
        due_at?: (string | null | undefined) | null;
        disputed_payment?: DisputedPayment.Raw | null;
        evidence_ids?: (string[] | null | undefined) | null;
        card_brand?: CardBrand.Raw | null;
        created_at?: string | null;
        updated_at?: string | null;
        brand_dispute_id?: (string | null | undefined) | null;
        reported_date?: (string | null | undefined) | null;
        reported_at?: (string | null | undefined) | null;
        version?: number | null;
        location_id?: (string | null | undefined) | null;
    }
}
