import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
export declare namespace Cards {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Cards {
    protected readonly _options: Cards.Options;
    constructor(_options?: Cards.Options);
    /**
     * Retrieves a list of cards owned by the account making the request.
     * A max of 25 cards will be returned.
     *
     * @param {Square.ListCardsRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cards.list({
     *         cursor: "cursor",
     *         customerId: "customer_id",
     *         includeDisabled: true,
     *         referenceId: "reference_id",
     *         sortOrder: "DESC"
     *     })
     */
    list(request?: Square.ListCardsRequest, requestOptions?: Cards.RequestOptions): Promise<core.Page<Square.Card>>;
    /**
     * Adds a card on file to an existing merchant.
     *
     * @param {Square.CreateCardRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cards.create({
     *         idempotencyKey: "4935a656-a929-4792-b97c-8848be85c27c",
     *         sourceId: "cnon:uIbfJXhXETSP197M3GB",
     *         card: {
     *             cardholderName: "Amelia Earhart",
     *             billingAddress: {
     *                 addressLine1: "500 Electric Ave",
     *                 addressLine2: "Suite 600",
     *                 locality: "New York",
     *                 administrativeDistrictLevel1: "NY",
     *                 postalCode: "10003",
     *                 country: "US"
     *             },
     *             customerId: "VDKXEEKPJN48QDG3BGGFAK05P8",
     *             referenceId: "user-id-1"
     *         }
     *     })
     */
    create(request: Square.CreateCardRequest, requestOptions?: Cards.RequestOptions): core.HttpResponsePromise<Square.CreateCardResponse>;
    private __create;
    /**
     * Retrieves details for a specific Card.
     *
     * @param {Square.GetCardsRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cards.get({
     *         cardId: "card_id"
     *     })
     */
    get(request: Square.GetCardsRequest, requestOptions?: Cards.RequestOptions): core.HttpResponsePromise<Square.GetCardResponse>;
    private __get;
    /**
     * Disables the card, preventing any further updates or charges.
     * Disabling an already disabled card is allowed but has no effect.
     *
     * @param {Square.DisableCardsRequest} request
     * @param {Cards.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.cards.disable({
     *         cardId: "card_id"
     *     })
     */
    disable(request: Square.DisableCardsRequest, requestOptions?: Cards.RequestOptions): core.HttpResponsePromise<Square.DisableCardResponse>;
    private __disable;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
