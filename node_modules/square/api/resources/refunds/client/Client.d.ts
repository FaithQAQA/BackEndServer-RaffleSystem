import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
export declare namespace Refunds {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Refunds {
    protected readonly _options: Refunds.Options;
    constructor(_options?: Refunds.Options);
    /**
     * Retrieves a list of refunds for the account making the request.
     *
     * Results are eventually consistent, and new refunds or changes to refunds might take several
     * seconds to appear.
     *
     * The maximum results per page is 100.
     *
     * @param {Square.ListRefundsRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.list({
     *         beginTime: "begin_time",
     *         endTime: "end_time",
     *         sortOrder: "sort_order",
     *         cursor: "cursor",
     *         locationId: "location_id",
     *         status: "status",
     *         sourceType: "source_type",
     *         limit: 1,
     *         updatedAtBeginTime: "updated_at_begin_time",
     *         updatedAtEndTime: "updated_at_end_time",
     *         sortField: "CREATED_AT"
     *     })
     */
    list(request?: Square.ListRefundsRequest, requestOptions?: Refunds.RequestOptions): Promise<core.Page<Square.PaymentRefund>>;
    /**
     * Refunds a payment. You can refund the entire payment amount or a
     * portion of it. You can use this endpoint to refund a card payment or record a
     * refund of a cash or external payment. For more information, see
     * [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
     *
     * @param {Square.RefundPaymentRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.refundPayment({
     *         idempotencyKey: "9b7f2dcf-49da-4411-b23e-a2d6af21333a",
     *         amountMoney: {
     *             amount: BigInt("1000"),
     *             currency: "USD"
     *         },
     *         appFeeMoney: {
     *             amount: BigInt("10"),
     *             currency: "USD"
     *         },
     *         paymentId: "R2B3Z8WMVt3EAmzYWLZvz7Y69EbZY",
     *         reason: "Example"
     *     })
     */
    refundPayment(request: Square.RefundPaymentRequest, requestOptions?: Refunds.RequestOptions): core.HttpResponsePromise<Square.RefundPaymentResponse>;
    private __refundPayment;
    /**
     * Retrieves a specific refund using the `refund_id`.
     *
     * @param {Square.GetRefundsRequest} request
     * @param {Refunds.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.refunds.get({
     *         refundId: "refund_id"
     *     })
     */
    get(request: Square.GetRefundsRequest, requestOptions?: Refunds.RequestOptions): core.HttpResponsePromise<Square.GetPaymentRefundResponse>;
    private __get;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
