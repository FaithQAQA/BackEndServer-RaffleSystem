import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
export declare namespace Payouts {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Payouts {
    protected readonly _options: Payouts.Options;
    constructor(_options?: Payouts.Options);
    /**
     * Retrieves a list of all payouts for the default location.
     * You can filter payouts by location ID, status, time range, and order them in ascending or descending order.
     * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.
     *
     * @param {Square.ListPayoutsRequest} request
     * @param {Payouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payouts.list({
     *         locationId: "location_id",
     *         status: "SENT",
     *         beginTime: "begin_time",
     *         endTime: "end_time",
     *         sortOrder: "DESC",
     *         cursor: "cursor",
     *         limit: 1
     *     })
     */
    list(request?: Square.ListPayoutsRequest, requestOptions?: Payouts.RequestOptions): Promise<core.Page<Square.Payout>>;
    /**
     * Retrieves details of a specific payout identified by a payout ID.
     * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.
     *
     * @param {Square.GetPayoutsRequest} request
     * @param {Payouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payouts.get({
     *         payoutId: "payout_id"
     *     })
     */
    get(request: Square.GetPayoutsRequest, requestOptions?: Payouts.RequestOptions): core.HttpResponsePromise<Square.GetPayoutResponse>;
    private __get;
    /**
     * Retrieves a list of all payout entries for a specific payout.
     * To call this endpoint, set `PAYOUTS_READ` for the OAuth scope.
     *
     * @param {Square.ListEntriesPayoutsRequest} request
     * @param {Payouts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.payouts.listEntries({
     *         payoutId: "payout_id",
     *         sortOrder: "DESC",
     *         cursor: "cursor",
     *         limit: 1
     *     })
     */
    listEntries(request: Square.ListEntriesPayoutsRequest, requestOptions?: Payouts.RequestOptions): Promise<core.Page<Square.PayoutEntry>>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
