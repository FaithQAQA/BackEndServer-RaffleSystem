import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
export declare namespace V1Transactions {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class V1Transactions {
    protected readonly _options: V1Transactions.Options;
    constructor(_options?: V1Transactions.Options);
    /**
     * Provides summary information for a merchant's online store orders.
     *
     * @param {Square.V1ListOrdersRequest} request
     * @param {V1Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.v1Transactions.v1ListOrders({
     *         locationId: "location_id",
     *         order: "DESC",
     *         limit: 1,
     *         batchToken: "batch_token"
     *     })
     */
    v1ListOrders(request: Square.V1ListOrdersRequest, requestOptions?: V1Transactions.RequestOptions): core.HttpResponsePromise<Square.V1Order[]>;
    private __v1ListOrders;
    /**
     * Provides comprehensive information for a single online store order, including the order's history.
     *
     * @param {Square.V1RetrieveOrderRequest} request
     * @param {V1Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.v1Transactions.v1RetrieveOrder({
     *         locationId: "location_id",
     *         orderId: "order_id"
     *     })
     */
    v1RetrieveOrder(request: Square.V1RetrieveOrderRequest, requestOptions?: V1Transactions.RequestOptions): core.HttpResponsePromise<Square.V1Order>;
    private __v1RetrieveOrder;
    /**
     * Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
     *
     * @param {Square.V1UpdateOrderRequest} request
     * @param {V1Transactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.v1Transactions.v1UpdateOrder({
     *         locationId: "location_id",
     *         orderId: "order_id",
     *         action: "COMPLETE"
     *     })
     */
    v1UpdateOrder(request: Square.V1UpdateOrderRequest, requestOptions?: V1Transactions.RequestOptions): core.HttpResponsePromise<Square.V1Order>;
    private __v1UpdateOrder;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
