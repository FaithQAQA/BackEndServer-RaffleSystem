import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
export declare namespace Employees {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Employees {
    protected readonly _options: Employees.Options;
    constructor(_options?: Employees.Options);
    /**
     *
     *
     * @param {Square.ListEmployeesRequest} request
     * @param {Employees.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.employees.list({
     *         locationId: "location_id",
     *         status: "ACTIVE",
     *         limit: 1,
     *         cursor: "cursor"
     *     })
     */
    list(request?: Square.ListEmployeesRequest, requestOptions?: Employees.RequestOptions): Promise<core.Page<Square.Employee>>;
    /**
     *
     *
     * @param {Square.GetEmployeesRequest} request
     * @param {Employees.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.employees.get({
     *         id: "id"
     *     })
     */
    get(request: Square.GetEmployeesRequest, requestOptions?: Employees.RequestOptions): core.HttpResponsePromise<Square.GetEmployeeResponse>;
    private __get;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
