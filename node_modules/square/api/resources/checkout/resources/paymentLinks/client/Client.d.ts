import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace PaymentLinks {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class PaymentLinks {
    protected readonly _options: PaymentLinks.Options;
    constructor(_options?: PaymentLinks.Options);
    /**
     * Lists all payment links.
     *
     * @param {Square.checkout.ListPaymentLinksRequest} request
     * @param {PaymentLinks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.paymentLinks.list({
     *         cursor: "cursor",
     *         limit: 1
     *     })
     */
    list(request?: Square.checkout.ListPaymentLinksRequest, requestOptions?: PaymentLinks.RequestOptions): Promise<core.Page<Square.PaymentLink>>;
    /**
     * Creates a Square-hosted checkout page. Applications can share the resulting payment link with their buyer to pay for goods and services.
     *
     * @param {Square.checkout.CreatePaymentLinkRequest} request
     * @param {PaymentLinks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.paymentLinks.create({
     *         idempotencyKey: "cd9e25dc-d9f2-4430-aedb-61605070e95f",
     *         quickPay: {
     *             name: "Auto Detailing",
     *             priceMoney: {
     *                 amount: BigInt("10000"),
     *                 currency: "USD"
     *             },
     *             locationId: "A9Y43N9ABXZBP"
     *         }
     *     })
     */
    create(request?: Square.checkout.CreatePaymentLinkRequest, requestOptions?: PaymentLinks.RequestOptions): core.HttpResponsePromise<Square.CreatePaymentLinkResponse>;
    private __create;
    /**
     * Retrieves a payment link.
     *
     * @param {Square.checkout.GetPaymentLinksRequest} request
     * @param {PaymentLinks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.paymentLinks.get({
     *         id: "id"
     *     })
     */
    get(request: Square.checkout.GetPaymentLinksRequest, requestOptions?: PaymentLinks.RequestOptions): core.HttpResponsePromise<Square.GetPaymentLinkResponse>;
    private __get;
    /**
     * Updates a payment link. You can update the `payment_link` fields such as
     * `description`, `checkout_options`, and  `pre_populated_data`.
     * You cannot update other fields such as the `order_id`, `version`, `URL`, or `timestamp` field.
     *
     * @param {Square.checkout.UpdatePaymentLinkRequest} request
     * @param {PaymentLinks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.paymentLinks.update({
     *         id: "id",
     *         paymentLink: {
     *             version: 1,
     *             checkoutOptions: {
     *                 askForShippingAddress: true
     *             }
     *         }
     *     })
     */
    update(request: Square.checkout.UpdatePaymentLinkRequest, requestOptions?: PaymentLinks.RequestOptions): core.HttpResponsePromise<Square.UpdatePaymentLinkResponse>;
    private __update;
    /**
     * Deletes a payment link.
     *
     * @param {Square.checkout.DeletePaymentLinksRequest} request
     * @param {PaymentLinks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.checkout.paymentLinks.delete({
     *         id: "id"
     *     })
     */
    delete(request: Square.checkout.DeletePaymentLinksRequest, requestOptions?: PaymentLinks.RequestOptions): core.HttpResponsePromise<Square.DeletePaymentLinkResponse>;
    private __delete;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
