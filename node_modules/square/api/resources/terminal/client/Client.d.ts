import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
import { Actions } from "../resources/actions/client/Client";
import { Checkouts } from "../resources/checkouts/client/Client";
import { Refunds } from "../resources/refunds/client/Client";
export declare namespace Terminal {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Terminal {
    protected readonly _options: Terminal.Options;
    protected _actions: Actions | undefined;
    protected _checkouts: Checkouts | undefined;
    protected _refunds: Refunds | undefined;
    constructor(_options?: Terminal.Options);
    get actions(): Actions;
    get checkouts(): Checkouts;
    get refunds(): Refunds;
    /**
     * Dismisses a Terminal action request if the status and type of the request permits it.
     *
     * See [Link and Dismiss Actions](https://developer.squareup.com/docs/terminal-api/advanced-features/custom-workflows/link-and-dismiss-actions) for more details.
     *
     * @param {Square.DismissTerminalActionRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalAction({
     *         actionId: "action_id"
     *     })
     */
    dismissTerminalAction(request: Square.DismissTerminalActionRequest, requestOptions?: Terminal.RequestOptions): core.HttpResponsePromise<Square.DismissTerminalActionResponse>;
    private __dismissTerminalAction;
    /**
     * Dismisses a Terminal checkout request if the status and type of the request permits it.
     *
     * @param {Square.DismissTerminalCheckoutRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalCheckout({
     *         checkoutId: "checkout_id"
     *     })
     */
    dismissTerminalCheckout(request: Square.DismissTerminalCheckoutRequest, requestOptions?: Terminal.RequestOptions): core.HttpResponsePromise<Square.DismissTerminalCheckoutResponse>;
    private __dismissTerminalCheckout;
    /**
     * Dismisses a Terminal refund request if the status and type of the request permits it.
     *
     * @param {Square.DismissTerminalRefundRequest} request
     * @param {Terminal.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.terminal.dismissTerminalRefund({
     *         terminalRefundId: "terminal_refund_id"
     *     })
     */
    dismissTerminalRefund(request: Square.DismissTerminalRefundRequest, requestOptions?: Terminal.RequestOptions): core.HttpResponsePromise<Square.DismissTerminalRefundResponse>;
    private __dismissTerminalRefund;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
