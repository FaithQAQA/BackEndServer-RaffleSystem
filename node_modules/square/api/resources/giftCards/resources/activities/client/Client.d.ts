import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace Activities {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Activities {
    protected readonly _options: Activities.Options;
    constructor(_options?: Activities.Options);
    /**
     * Lists gift card activities. By default, you get gift card activities for all
     * gift cards in the seller's account. You can optionally specify query parameters to
     * filter the list. For example, you can get a list of gift card activities for a gift card,
     * for all gift cards in a specific region, or for activities within a time window.
     *
     * @param {Square.giftCards.ListActivitiesRequest} request
     * @param {Activities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.activities.list({
     *         giftCardId: "gift_card_id",
     *         type: "type",
     *         locationId: "location_id",
     *         beginTime: "begin_time",
     *         endTime: "end_time",
     *         limit: 1,
     *         cursor: "cursor",
     *         sortOrder: "sort_order"
     *     })
     */
    list(request?: Square.giftCards.ListActivitiesRequest, requestOptions?: Activities.RequestOptions): Promise<core.Page<Square.GiftCardActivity>>;
    /**
     * Creates a gift card activity to manage the balance or state of a [gift card](entity:GiftCard).
     * For example, create an `ACTIVATE` activity to activate a gift card with an initial balance before first use.
     *
     * @param {Square.giftCards.CreateGiftCardActivityRequest} request
     * @param {Activities.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.giftCards.activities.create({
     *         idempotencyKey: "U16kfr-kA70er-q4Rsym-7U7NnY",
     *         giftCardActivity: {
     *             type: "ACTIVATE",
     *             locationId: "81FN9BNFZTKS4",
     *             giftCardId: "gftc:6d55a72470d940c6ba09c0ab8ad08d20",
     *             activateActivityDetails: {
     *                 orderId: "jJNGHm4gLI6XkFbwtiSLqK72KkAZY",
     *                 lineItemUid: "eIWl7X0nMuO9Ewbh0ChIx"
     *             }
     *         }
     *     })
     */
    create(request: Square.giftCards.CreateGiftCardActivityRequest, requestOptions?: Activities.RequestOptions): core.HttpResponsePromise<Square.CreateGiftCardActivityResponse>;
    private __create;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
