import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace TeamMemberProfiles {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class TeamMemberProfiles {
    protected readonly _options: TeamMemberProfiles.Options;
    constructor(_options?: TeamMemberProfiles.Options);
    /**
     * Lists booking profiles for team members.
     *
     * @param {Square.bookings.ListTeamMemberProfilesRequest} request
     * @param {TeamMemberProfiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.teamMemberProfiles.list({
     *         bookableOnly: true,
     *         limit: 1,
     *         cursor: "cursor",
     *         locationId: "location_id"
     *     })
     */
    list(request?: Square.bookings.ListTeamMemberProfilesRequest, requestOptions?: TeamMemberProfiles.RequestOptions): Promise<core.Page<Square.TeamMemberBookingProfile>>;
    /**
     * Retrieves a team member's booking profile.
     *
     * @param {Square.bookings.GetTeamMemberProfilesRequest} request
     * @param {TeamMemberProfiles.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.bookings.teamMemberProfiles.get({
     *         teamMemberId: "team_member_id"
     *     })
     */
    get(request: Square.bookings.GetTeamMemberProfilesRequest, requestOptions?: TeamMemberProfiles.RequestOptions): core.HttpResponsePromise<Square.GetTeamMemberBookingProfileResponse>;
    private __get;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
