import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
export declare namespace Vendors {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Vendors {
    protected readonly _options: Vendors.Options;
    constructor(_options?: Vendors.Options);
    /**
     * Creates one or more [Vendor](entity:Vendor) objects to represent suppliers to a seller.
     *
     * @param {Square.BatchCreateVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.batchCreate({
     *         vendors: {
     *             "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe": {
     *                 name: "Joe's Fresh Seafood",
     *                 address: {
     *                     addressLine1: "505 Electric Ave",
     *                     addressLine2: "Suite 600",
     *                     locality: "New York",
     *                     administrativeDistrictLevel1: "NY",
     *                     postalCode: "10003",
     *                     country: "US"
     *                 },
     *                 contacts: [{
     *                         name: "Joe Burrow",
     *                         emailAddress: "joe@joesfreshseafood.com",
     *                         phoneNumber: "1-212-555-4250",
     *                         ordinal: 1
     *                     }],
     *                 accountNumber: "4025391",
     *                 note: "a vendor"
     *             }
     *         }
     *     })
     */
    batchCreate(request: Square.BatchCreateVendorsRequest, requestOptions?: Vendors.RequestOptions): core.HttpResponsePromise<Square.BatchCreateVendorsResponse>;
    private __batchCreate;
    /**
     * Retrieves one or more vendors of specified [Vendor](entity:Vendor) IDs.
     *
     * @param {Square.BatchGetVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.batchGet({
     *         vendorIds: ["INV_V_JDKYHBWT1D4F8MFH63DBMEN8Y4"]
     *     })
     */
    batchGet(request?: Square.BatchGetVendorsRequest, requestOptions?: Vendors.RequestOptions): core.HttpResponsePromise<Square.BatchGetVendorsResponse>;
    private __batchGet;
    /**
     * Updates one or more of existing [Vendor](entity:Vendor) objects as suppliers to a seller.
     *
     * @param {Square.BatchUpdateVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.batchUpdate({
     *         vendors: {
     *             "FMCYHBWT1TPL8MFH52PBMEN92A": {
     *                 vendor: {}
     *             },
     *             "INV_V_JDKYHBWT1D4F8MFH63DBMEN8Y4": {
     *                 vendor: {}
     *             }
     *         }
     *     })
     */
    batchUpdate(request: Square.BatchUpdateVendorsRequest, requestOptions?: Vendors.RequestOptions): core.HttpResponsePromise<Square.BatchUpdateVendorsResponse>;
    private __batchUpdate;
    /**
     * Creates a single [Vendor](entity:Vendor) object to represent a supplier to a seller.
     *
     * @param {Square.CreateVendorRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.create({
     *         idempotencyKey: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
     *         vendor: {
     *             name: "Joe's Fresh Seafood",
     *             address: {
     *                 addressLine1: "505 Electric Ave",
     *                 addressLine2: "Suite 600",
     *                 locality: "New York",
     *                 administrativeDistrictLevel1: "NY",
     *                 postalCode: "10003",
     *                 country: "US"
     *             },
     *             contacts: [{
     *                     name: "Joe Burrow",
     *                     emailAddress: "joe@joesfreshseafood.com",
     *                     phoneNumber: "1-212-555-4250",
     *                     ordinal: 1
     *                 }],
     *             accountNumber: "4025391",
     *             note: "a vendor"
     *         }
     *     })
     */
    create(request: Square.CreateVendorRequest, requestOptions?: Vendors.RequestOptions): core.HttpResponsePromise<Square.CreateVendorResponse>;
    private __create;
    /**
     * Searches for vendors using a filter against supported [Vendor](entity:Vendor) properties and a supported sorter.
     *
     * @param {Square.SearchVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.search()
     */
    search(request?: Square.SearchVendorsRequest, requestOptions?: Vendors.RequestOptions): core.HttpResponsePromise<Square.SearchVendorsResponse>;
    private __search;
    /**
     * Retrieves the vendor of a specified [Vendor](entity:Vendor) ID.
     *
     * @param {Square.GetVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.get({
     *         vendorId: "vendor_id"
     *     })
     */
    get(request: Square.GetVendorsRequest, requestOptions?: Vendors.RequestOptions): core.HttpResponsePromise<Square.GetVendorResponse>;
    private __get;
    /**
     * Updates an existing [Vendor](entity:Vendor) object as a supplier to a seller.
     *
     * @param {Square.UpdateVendorsRequest} request
     * @param {Vendors.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.vendors.update({
     *         vendorId: "vendor_id",
     *         body: {
     *             idempotencyKey: "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
     *             vendor: {
     *                 id: "INV_V_JDKYHBWT1D4F8MFH63DBMEN8Y4",
     *                 name: "Jack's Chicken Shack",
     *                 version: 1,
     *                 status: "ACTIVE"
     *             }
     *         }
     *     })
     */
    update(request: Square.UpdateVendorsRequest, requestOptions?: Vendors.RequestOptions): core.HttpResponsePromise<Square.UpdateVendorResponse>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
