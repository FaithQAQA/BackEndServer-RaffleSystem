import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient";
import * as core from "../../../../core";
import type * as Square from "../../../index";
import { Evidence } from "../resources/evidence/client/Client";
export declare namespace Disputes {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Disputes {
    protected readonly _options: Disputes.Options;
    protected _evidence: Evidence | undefined;
    constructor(_options?: Disputes.Options);
    get evidence(): Evidence;
    /**
     * Returns a list of disputes associated with a particular account.
     *
     * @param {Square.ListDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.list({
     *         cursor: "cursor",
     *         states: "INQUIRY_EVIDENCE_REQUIRED",
     *         locationId: "location_id"
     *     })
     */
    list(request?: Square.ListDisputesRequest, requestOptions?: Disputes.RequestOptions): Promise<core.Page<Square.Dispute>>;
    /**
     * Returns details about a specific dispute.
     *
     * @param {Square.GetDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.get({
     *         disputeId: "dispute_id"
     *     })
     */
    get(request: Square.GetDisputesRequest, requestOptions?: Disputes.RequestOptions): core.HttpResponsePromise<Square.GetDisputeResponse>;
    private __get;
    /**
     * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and
     * updates the dispute state to ACCEPTED.
     *
     * Square debits the disputed amount from the sellerâ€™s Square account. If the Square account
     * does not have sufficient funds, Square debits the associated bank account.
     *
     * @param {Square.AcceptDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.accept({
     *         disputeId: "dispute_id"
     *     })
     */
    accept(request: Square.AcceptDisputesRequest, requestOptions?: Disputes.RequestOptions): core.HttpResponsePromise<Square.AcceptDisputeResponse>;
    private __accept;
    /**
     * Uploads a file to use as evidence in a dispute challenge. The endpoint accepts HTTP
     * multipart/form-data file uploads in HEIC, HEIF, JPEG, PDF, PNG, and TIFF formats.
     *
     * @param {Square.CreateEvidenceFileDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.disputes.createEvidenceFile({
     *         disputeId: "dispute_id"
     *     })
     */
    createEvidenceFile(request: Square.CreateEvidenceFileDisputesRequest, requestOptions?: Disputes.RequestOptions): core.HttpResponsePromise<Square.CreateDisputeEvidenceFileResponse>;
    private __createEvidenceFile;
    /**
     * Uploads text to use as evidence for a dispute challenge.
     *
     * @param {Square.CreateDisputeEvidenceTextRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.createEvidenceText({
     *         disputeId: "dispute_id",
     *         idempotencyKey: "ed3ee3933d946f1514d505d173c82648",
     *         evidenceType: "TRACKING_NUMBER",
     *         evidenceText: "1Z8888888888888888"
     *     })
     */
    createEvidenceText(request: Square.CreateDisputeEvidenceTextRequest, requestOptions?: Disputes.RequestOptions): core.HttpResponsePromise<Square.CreateDisputeEvidenceTextResponse>;
    private __createEvidenceText;
    /**
     * Submits evidence to the cardholder's bank.
     *
     * The evidence submitted by this endpoint includes evidence uploaded
     * using the [CreateDisputeEvidenceFile](api-endpoint:Disputes-CreateDisputeEvidenceFile) and
     * [CreateDisputeEvidenceText](api-endpoint:Disputes-CreateDisputeEvidenceText) endpoints and
     * evidence automatically provided by Square, when available. Evidence cannot be removed from
     * a dispute after submission.
     *
     * @param {Square.SubmitEvidenceDisputesRequest} request
     * @param {Disputes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.disputes.submitEvidence({
     *         disputeId: "dispute_id"
     *     })
     */
    submitEvidence(request: Square.SubmitEvidenceDisputesRequest, requestOptions?: Disputes.RequestOptions): core.HttpResponsePromise<Square.SubmitEvidenceResponse>;
    private __submitEvidence;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
