import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as core from "../../../../../../core";
import type * as Square from "../../../../../index";
export declare namespace Images {
    interface Options extends BaseClientOptions {
    }
    interface RequestOptions extends BaseRequestOptions {
    }
}
export declare class Images {
    protected readonly _options: Images.Options;
    constructor(_options?: Images.Options);
    /**
     * Uploads an image file to be represented by a [CatalogImage](entity:CatalogImage) object that can be linked to an existing
     * [CatalogObject](entity:CatalogObject) instance. The resulting `CatalogImage` is unattached to any `CatalogObject` if the `object_id`
     * is not specified.
     *
     * This `CreateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.
     *
     * @param {Square.catalog.CreateImagesRequest} request
     * @param {Images.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.catalog.images.create({})
     */
    create(request: Square.catalog.CreateImagesRequest, requestOptions?: Images.RequestOptions): core.HttpResponsePromise<Square.CreateCatalogImageResponse>;
    private __create;
    /**
     * Uploads a new image file to replace the existing one in the specified [CatalogImage](entity:CatalogImage) object.
     *
     * This `UpdateCatalogImage` endpoint accepts HTTP multipart/form-data requests with a JSON part and an image file part in
     * JPEG, PJPEG, PNG, or GIF format. The maximum file size is 15MB.
     *
     * @param {Square.catalog.UpdateImagesRequest} request
     * @param {Images.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.catalog.images.update({
     *         imageId: "image_id"
     *     })
     */
    update(request: Square.catalog.UpdateImagesRequest, requestOptions?: Images.RequestOptions): core.HttpResponsePromise<Square.UpdateCatalogImageResponse>;
    private __update;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
